#modeled after minerva_hadmult_epsilon.py with domain adversarial training

name: "hadmult_epsilon_xuv_adv"

# ---------------------- Data Layers -------------------------
# ---------------------- Source ------------------------------
#source=me1Amc, target=minerva1
#Training

layer {
  name: "source_data" 
  type: "HDF5Data"
  include {
    phase: TRAIN
  }
  hdf5_data_param {
    source: "/lustre/atlas/proj-shared/hep105/sohini/hadmult/hadmult_epsilon_source.trainlist"
    batch_size: 50
  }
  top: "hits-x_me1Amc"
  top: "hits-u_me1Amc"
  top: "hits-v_me1Amc"
  top: "n-hadmultmeas"
}


layer {
  name: "source_domain_labels"
  type: "DummyData"
  top: "source_domain_labels"
  dummy_data_param {
    data_filler {
      type: "constant"
      value: 0
    }
    num: 50 #make same as batch size
    channels: 1
    height: 1
    width: 1
  }
  include: { phase: TRAIN }
}


# --------------------- Target  ------------------------------
#Training

layer {
  name: "target_data" 
  type: "HDF5Data"
  include {
    phase: TRAIN
  }
  hdf5_data_param {
    source: "/lustre/atlas/proj-shared/hep105/sohini/hadmult/hadmult_epsilon_target.trainlist"
    batch_size: 50
  }
  top: "hits-x_minerva1mc"
  top: "hits-u_minerva1mc"
  top: "hits-v_minerva1mc"
}

layer {
  name: "target_domain_labels"
  type: "DummyData"
  top: "target_domain_labels"
  dummy_data_param {
    data_filler {
      type: "constant"
      value: 1
    }
    num: 50 #make same as batch size
    channels: 1
    height: 1
    width: 1
  }
  include: { phase: TRAIN }
}

#Testing

#????
layer {
  name: "target_data" 
  type: "HDF5Data"
  include {
    phase: TEST
  }
  hdf5_data_param {
    source: "/lustre/atlas/proj-shared/hep105/sohini/hadmult/hadmult_epsilon_target.testlist"
    batch_size: 50
  }
  top: "hits-x"
  top: "hits-u"
  top: "hits-v"
  top: "n-hadmultmeas"
}

layer {
  name: "target_domain_labels"
  type: "DummyData"
  top: "dc_labels"
  dummy_data_param {
    data_filler {
      type: "constant"
      value: 1
    }
    num: 50
    channels: 1
    height: 1
    width: 1
  }
  include: { phase: TEST }
}


# ---------------------------------------------------------- Data concatenation
layer {
  name: "concat_data_x"
  type: "Concat"
  bottom: "hits-x_me1Amc"
  bottom: "hits-x_minerva1mc"
  top: "hits-x"
  concat_param {
    axis: 0 #concat_dim -> axis
  }
  include: { phase: TRAIN }
}

layer {
  name: "concat_data_u"
  type: "Concat"
  bottom: "hits-u_me1Amc"
  bottom: "hits-u_minerva1mc"
  top: "hits-u"
  concat_param {
    axis: 0
  }
  include: { phase: TRAIN }
}

layer {
  name: "concat_data_v"
  type: "Concat"
  bottom: "hits-v_me1Amc"
  bottom: "hits-v_minerva1mc"
  top: "hits-v"
  concat_param {
    axis: 0
  }
  include: { phase: TRAIN }
}

layer {
  name: "concat_domain_labels"
  type: "Concat"
  bottom: "source_domain_labels"
  bottom: "target_domain_labels"
  top: "dc_labels"
  concat_param {
    axis: 0
  }
  include: { phase: TRAIN }
}


#--------------------------x branch---------------------------------------------

layer {
  name: "conv_x1"
  type: "Convolution"
  bottom: "hits-x"
  top: "conv_x1"
  convolution_param {
    num_output: 12 #num filters
    kernel_h: 8 #dimension/size of filter
    kernel_w: 5
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_x1"
  type: "ReLU"
  bottom: "conv_x1"
  top: "conv_x1"
}

layer {
  name: "pool_x1"
  type: "Pooling"
  bottom: "conv_x1"
  top: "pool_x1"
  pooling_param {
    pool: MAX
    kernel_size: 2
  }
}

layer {
  name: "conv_x2"
  type: "Convolution"
  bottom: "pool_x1"
  top: "conv_x2"
  convolution_param {
    num_output: 20
    kernel_h: 7
    kernel_w: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_x2"
  type: "ReLU"
  bottom: "conv_x2"
  top: "conv_x2"
}

layer {
  name: "pool_x2"
  type: "Pooling"
  bottom: "conv_x2"
  top: "pool_x2"
  pooling_param {
    pool: MAX
    kernel_size: 2
  }
}

layer {
  name: "conv_x3"
  type: "Convolution"
  bottom: "pool_x2"
  top: "conv_x3"
  convolution_param {
    num_output: 28
    kernel_h: 6
    kernel_w: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_x3"
  type: "ReLU"
  bottom: "conv_x3"
  top: "conv_x3"
}

layer {
  name: "pool_x3"
  type: "Pooling"
  bottom: "conv_x3"
  top: "pool_x3"
  pooling_param {
    pool: MAX
    kernel_size: 2
  }
}

layer {
  name: "conv_x4"
  type: "Convolution"
  bottom: "pool_x3"
  top: "conv_x4"
  convolution_param {
    num_output: 36
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_x4"
  type: "ReLU"
  bottom: "conv_x4"
  top: "conv_x4"
}

layer {
  name: "pool_x4"
  type: "Pooling"
  bottom: "conv_x4"
  top: "pool_x4"
  pooling_param {
    pool: MAX
    kernel_size:1
  }
}

layer {
  name: "dl_x1"
  type: "InnerProduct"
  bottom: "pool_x4"
  top: "dl_x1"
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_x5"
  type: "ReLU"
  bottom: "dl_x1"
  top: "dl_x1"
}

layer {
  name: "drop_x1"
  type: "Dropout"
  bottom: "dl_x1"
  top: "dl_x1"
  dropout_param {
    dropout_ratio: 0.5
  }
}

#--------------------------u branch---------------------------------------------


layer {
  name: "conv_u1"
  type: "Convolution"
  bottom: "hits-u"
  top: "conv_u1"
  convolution_param {
    num_output: 12
    kernel_h: 8
    kernel_w: 5
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_u1"
  type: "ReLU"
  bottom: "conv_u1"
  top: "conv_u1"
}

layer {
  name: "pool_u1"
  type: "Pooling"
  bottom: "conv_u1"
  top: "pool_u1"
  pooling_param {
    pool: MAX
    kernel_size: 2
  }
}

layer {
  name: "conv_u2"
  type: "Convolution"
  bottom: "pool_u1"
  top: "conv_u2"
  convolution_param {
    num_output: 20
    kernel_h: 7
    kernel_w: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_u2"
  type: "ReLU"
  bottom: "conv_u2"
  top: "conv_u2"
}

layer {
  name: "pool_u2"
  type: "Pooling"
  bottom: "conv_u2"
  top: "pool_u2"
  pooling_param {
    pool: MAX
    kernel_size: 2
  }
}

layer {
  name: "conv_u3"
  type: "Convolution"
  bottom: "pool_u2"
  top: "conv_u3"
  convolution_param {
    num_output: 28
    kernel_h: 6
    kernel_w: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_u3"
  type: "ReLU"
  bottom: "conv_u3"
  top: "conv_u3"
}

layer {
  name: "pool_u3"
  type: "Pooling"
  bottom: "conv_u3"
  top: "pool_u3"
  pooling_param {
    pool: MAX
    kernel_h: 2
    kernel_w: 1
  }
}

layer {
  name: "conv_u4"
  type: "Convolution"
  bottom: "pool_u3"
  top: "conv_u4"
  convolution_param {
    num_output: 36
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_u4"
  type: "ReLU"
  bottom: "conv_u4"
  top: "conv_u4"
}

layer {
  name: "pool_u4"
  type: "Pooling"
  bottom: "conv_u4"
  top: "pool_u4"
  pooling_param {
    pool: MAX
    kernel_size: 1
  }
}

layer {
  name: "dl_u1"
  type: "InnerProduct"
  bottom: "pool_u4"
  top: "dl_u1"
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_u5"
  type: "ReLU"
  bottom: "dl_u1"
  top: "dl_u1"
}

layer {
  name: "drop_u1"
  type: "Dropout"
  bottom: "dl_u1"
  top: "dl_u1"
  dropout_param {
    dropout_ratio: 0.5
  }
}

#--------------------------v branch---------------------------------------------

layer {
  name: "conv_v1"
  type: "Convolution"
  bottom: "hits-v"
  top: "conv_v1"
  convolution_param {
    num_output: 12
    kernel_h: 8
    kernel_w: 5
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_v1"
  type: "ReLU"
  bottom: "conv_v1"
  top: "conv_v1"
}

layer {
  name: "pool_v1"
  type: "Pooling"
  bottom: "conv_v1"
  top: "pool_v1"
  pooling_param {
    pool: MAX
    kernel_size: 2
  }
}

layer {
  name: "conv_v2"
  type: "Convolution"
  bottom: "pool_v1"
  top: "conv_v2"
  convolution_param {
    num_output: 20
    kernel_h: 7
    kernel_w: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_v2"
  type: "ReLU"
  bottom: "conv_v2"
  top: "conv_v2"
}

layer {
  name: "pool_v2"
  type: "Pooling"
  bottom: "conv_v2"
  top: "pool_v2"
  pooling_param {
    pool: MAX
    kernel_size: 2
  }
}

layer {
  name: "conv_v3"
  type: "Convolution"
  bottom: "pool_v2"
  top: "conv_v3"
  convolution_param {
    num_output: 28
    kernel_h: 6
    kernel_w: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_v3"
  type: "ReLU"
  bottom: "conv_v3"
  top: "conv_v3"
}

layer {
  name: "pool_v3"
  type: "Pooling"
  bottom: "conv_v3"
  top: "pool_v3"
  pooling_param {
    pool: MAX
    kernel_h: 2
    kernel_w: 1
  }
}

layer {
  name: "conv_v4"
  type: "Convolution"
  bottom: "pool_v3"
  top: "conv_v4"
  convolution_param {
    num_output: 36
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_v4"
  type: "ReLU"
  bottom: "conv_v4"
  top: "conv_v4"
}

layer {
  name: "pool_v4"
  type: "Pooling"
  bottom: "conv_v4"
  top: "pool_v4"
  pooling_param {
    pool: MAX
    kernel_size: 1
  }
}

layer {
  name: "dl_v1"
  type: "InnerProduct"
  bottom: "pool_v4"
  top: "dl_v1"
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_v5"
  type: "ReLU"
  bottom: "dl_v1"
  top: "dl_v1"
}

layer {
  name: "drop_v1"
  type: "Dropout"
  bottom: "dl_v1"
  top: "dl_v1"
  dropout_param {
    dropout_ratio: 0.5
  }
}


#-------------------------- concatenate branches -----------------------------------------

layer {
    name: "concat_xuv"
    type: "Concat"
    top: "concat_xuv"
    bottom: "dl_x1"
    bottom: "dl_u1"
    bottom: "dl_v1"
    concat_param {
        axis: 1
    }
}

layer {
  name: "dl_xuv"
  type: "InnerProduct"
  bottom: "concat_xuv"
  top: "dl_xuv"
  inner_product_param {
    num_output: 128
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_xuv"
  type: "ReLU"
  bottom: "dl_xuv"
  top: "dl_xuv"
}

layer {
  name: "drop_xuv"
  type: "Dropout"
  bottom: "dl_xuv"
  top: "dl_xuv"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "bottleneck"
  type: "InnerProduct"
  bottom: "dl_xuv"
  top: "bottleneck"
  inner_product_param {
    num_output: 6
    weight_filler {
      type: "xavier" 
    }
    bias_filler {
      type: "constant"
    }
  }
}

# -----------------------------------------------------------------------------
# ------------------------------------------------------------- Label predictor
# -----------------------------------------------------------------------------

# ------------------------------------------------------ Exclude target samples
layer {
  name: "slice_features"
  type: "Slice"
  bottom: "bottleneck"
  top: "source_features"
  top: "target_features"
  slice_param {
    slice_dim: 0
  }
  include: { phase: TRAIN }
}
layer {
  name: "kill_target_features"
  type: "Silence"
  bottom: "target_features"
  include: { phase: TRAIN }
}
layer {
  name: "bottleneck_alias"
  type: "Split"
  bottom: "bottleneck"
  top: "source_features"
  include: { phase: TEST }
}


# ----------------------------------------------------------------------------
layer {
  name: "lp_fc8"
  type: "InnerProduct"
  bottom: "source_features"
  top: "lp_fc8"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 6
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "lp_accuracy"
  type: "Accuracy"
  bottom: "lp_fc8"
  bottom: "n-hadmultmeas" 
  top: "lp_accuracy"
  include: { phase: TEST }
}
layer {
  name: "lp_loss"
  type: "SoftmaxWithLoss"
  bottom: "lp_fc8"
  bottom: "n-hadmultmeas"
  top: "lp_loss"
}

# -----------------------------------------------------------------------------
# ----------------------------------------------------------- Gradient reversal
# -----------------------------------------------------------------------------
layer {
  name: "grl"
  type: "GradientScaler"
  bottom: "bottleneck"
  top: "grl"
  gradient_scaler_param {
    lower_bound: 0.0
    upper_bound: 1.0
    alpha: 10.0
    max_iter: 10000 #these are defaults from paper
  }
}

# -----------------------------------------------------------------------------
# ----------------------------------------------------------- Domain classifier
# -----------------------------------------------------------------------------
layer {
  name: "dc_ip1"
  type: "InnerProduct"
  bottom: "grl"
  top: "dc_ip1"
  param {
    lr_mult: 10
  }
  param {
    lr_mult: 20
  }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "dc_relu1"
  type: "ReLU"
  bottom: "dc_ip1"
  top: "dc_ip1"
}
layer {
  name: "dc_drop1"
  type: "Dropout"
  bottom: "dc_ip1"
  top: "dc_ip1"
  dropout_param {
    dropout_ratio: 0.5
  }
}
# ----------------------------------------------------------------------------
layer {
  name: "dc_ip2"
  type: "InnerProduct"
  bottom: "dc_ip1"
  top: "dc_ip2"
  param {
    lr_mult: 10
  }
  param {
    lr_mult: 20
  }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "dc_relu2"
  type: "ReLU"
  bottom: "dc_ip2"
  top: "dc_ip2"
}
layer {
  name: "dc_drop2"
  type: "Dropout"
  bottom: "dc_ip2"
  top: "dc_ip2"
  dropout_param {
    dropout_ratio: 0.5
  }
}
# ----------------------------------------------------------------------------
layer {
  name: "dc_ip3"
  type: "InnerProduct"
  bottom: "dc_ip2"
  top: "dc_ip3"
  param {
    lr_mult: 10
  }
  param {
    lr_mult: 20
  }
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "gaussian"
      std: 0.3
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "dc_loss"
  type: "SigmoidCrossEntropyLoss"
  bottom: "dc_ip3"
  bottom: "dc_labels"
  top: "dc_loss"
  loss_weight: 0.1
}

